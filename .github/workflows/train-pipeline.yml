name: Model Training Pipeline

on:
  workflow_run:
    workflows: ["Data-Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  train-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install Poetry
      run: pipx install poetry

    - name: Install dependencies
      run: |
        poetry install --with dev --no-interaction --no-root

    - name: Install DVC
      run: pip install dvc

    - name: Install DVC with S3 support
      run: pip install 'dvc[s3]'

    - name: Configure DVC
      run: |
          dvc remote modify origin endpointurl https://dagshub.com/GrozdaniTanja/gold-price-prediction.s3
          dvc remote modify origin access_key_id ${{ secrets.DAGSHUB_ACCESS_KEY_ID }}
          dvc remote modify origin secret_access_key ${{ secrets.DAGSHUB_SECRET_ACCESS_KEY }}


    - name: DVC pull
      run: dvc pull -r origin

    - name: Set up environment variables
      run: echo "DAGSHUB_API_TOKEN=${{ secrets.DAGSHUB_API_TOKEN }}" >> $GITHUB_ENV


    - name: Train model
      env:
        DAGSHUB_API_TOKEN: ${{ secrets.DAGSHUB_API_TOKEN }}
      run: poetry run python src/model/train_model.py

    - name: Commit changes to GIT
      run: |
        git config --global user.email "tanja.grozdani@student.um.si"
        git config --global user.name "GrozdaniTanja"
        git stash
        git pull --rebase origin ${{ github.ref }}
        git stash pop || true
        # Check for changes before attempting to commit
        if [[ `git status --porcelain` ]]; then
          git add .
          git commit -m "action: validate data"
        else
          echo "No changes to commit"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
